▁This 4.4765625
▁is 1.55078125
▁a 0.837890625
▁compiler 11.2109375
; 7.55078125
▁implemented 9.3515625
▁in 0.556640625
▁C 1.4326171875
++, 2.5390625
▁which 3.921875
▁comp 2.353515625
iles 0.015655517578125
▁C 0.9521484375
▁code 2.0234375
▁into 1.716796875
▁C 1.7685546875
▁compatible 8.9609375
▁three 12.1171875
- 1.001953125
address 0.275390625
▁code 0.69189453125
. 0.372802734375
<0x0A> 1.0751953125
It 2.265625
▁takes 4.66796875
▁as 2.400390625
▁a 4.11328125
▁parameter 1.41015625
▁the 1.189453125
▁filename 3.3984375
▁of 0.6796875
▁a 1.546875
▁source 2.44140625
▁file 0.293212890625
, 1.0908203125
▁and 0.6015625
▁outputs 1.8466796875
▁both 6.71875
▁to 5.2109375
▁the 2.455078125
▁screen 1.51953125
▁and 0.3955078125
▁to 0.3876953125
▁the 1.62109375
▁file 1.04296875
▁" 3.12890625
output 1.5791015625
. 0.142578125
txt 2.6796875
". 1.4541015625
▁If 4.40625
▁the 1.1494140625
▁code 4.11328125
▁compiled 3.306640625
▁successfully 2.705078125
, 0.196533203125
▁the 1.1064453125
▁compiler 3.40625
▁will 0.89208984375
▁return 4.37890625
▁a 1.93359375
▁ 1.40625
0 0.1748046875
, 1.466796875
▁otherwise 0.50439453125
▁it 0.84765625
▁will 0.1202392578125
▁return 0.06439208984375
▁a 0.337890625
▁ 0.498291015625
1 0.0236053466796875
. 0.1353759765625
<0x0A> 0.33154296875
The 1.693359375
▁compiler 2.02734375
' 4.54296875
s 0.0006537437438964844
▁scope 7.43359375
▁currently 6.60546875
▁is 2.009765625
▁the 3.833984375
▁declaration 6.5703125
▁of 0.33056640625
▁integer 5.55078125
▁variables 0.783203125
▁with 4.765625
▁user 7.6484375
▁specified 2.984375
▁names 0.83203125
, 1.197265625
▁the 2.78125
▁functions 5.47265625
▁in 5.44140625
() 8.390625
▁and 0.053497314453125
▁out 0.356201171875
(), 0.744140625
▁and 0.5537109375
▁any 5.5390625
▁assignment 5.34765625
▁to 2.119140625
▁a 2.0546875
▁variable 0.479248046875
▁of 2.212890625
▁an 4.22265625
▁expression 4.9609375
▁containing 3.740234375
▁variables 4.0390625
▁and 2.15234375
/ 2.884765625
or 0.0053558349609375
▁positive 10.171875
▁and 3.2109375
/ 1.62109375
or 0.005828857421875
▁negative 0.06756591796875
▁integers 1.4482421875
▁connected 11.4921875
▁with 1.041015625
▁( 6.5078125
, 2.453125
▁), 2.861328125
▁+ 2.25
, 0.3828125
▁- 0.302490234375
, 0.25634765625
▁* 0.70751953125
, 0.228515625
▁/ 0.63720703125
, 0.56298828125
▁++ 6.28515625
, 0.384765625
▁+= 6.84765625
, 0.1904296875
▁-- 2.669921875
▁and 2.482421875
/ 5.03125
or 0.0278167724609375
▁- 3.177734375
=. 0.1910400390625
▁White 11.53125
▁space 0.75830078125
, 2.439453125
▁including 4.16015625
▁new 1.625
▁lines 0.8330078125
▁and 2.17578125
▁tabs 1.77734375
, 0.2330322265625
▁is 0.81103515625
▁stri 5.4296875
pped 0.0009293556213378906
. 1.9111328125
<0x0A> 0.568359375
From 7.68359375
▁this 2.349609375
, 1.9521484375
▁it 1.7900390625
▁generates 7.1328125
▁C 3.0390625
▁three 6.20703125
- 0.055419921875
address 0.00911712646484375
▁code 0.11553955078125
▁using 3.744140625
▁temporary 5.87890625
▁variables 0.295654296875
, 1.6005859375
▁which 2.234375
▁is 1.4892578125
▁then 1.4169921875
▁put 4.34375
▁recurs 12.7734375
ively 0.0031299591064453125
▁through 2.662109375
▁ 8.109375
8 3.716796875
▁levels 4.6171875
▁of 0.03009033203125
▁optim 2.525390625
isation 0.92529296875
. 0.89013671875
<0x0A> 0.8486328125
B 4.97265625
oth 1.6162109375
▁outputs 6.46875
▁of 3.4609375
▁this 3.1328125
▁( 5.9453125
screen 4.64453125
▁and 0.1766357421875
▁file 0.373046875
) 0.0992431640625
▁are 0.541015625
▁separated 6.9375
▁back 11.3515625
▁out 4.3984375
▁with 3.82421875
▁new 3.017578125
▁lines 0.7861328125
▁to 3.533203125
▁make 0.97216796875
▁it 0.908203125
▁easier 0.3369140625
▁for 2.39453125
▁the 0.94287109375
▁user 1.0244140625
▁to 0.05718994140625
▁read 1.390625
. 0.80419921875
<0x0A> 0.257080078125
The 1.384765625
▁code 2.60546875
▁is 1.232421875
▁split 4.24609375
▁up 1.7978515625
▁into 0.245361328125
▁source 6.19140625
▁files 0.74462890625
, 1.2392578125
▁each 1.9619140625
▁with 2.0234375
▁a 0.9091796875
▁header 2.71484375
. 3.4453125
▁The 1.419921875
▁header 0.52001953125
▁contains 1.4716796875
▁global 4.91015625
▁variables 0.7431640625
, 1.2255859375
▁definitions 4.78125
▁and 1.7900390625
▁function 2.82421875
▁pro 0.509765625
tot 0.003997802734375
ypes 0.002780914306640625
. 0.4521484375
▁The 0.9599609375
▁comments 8.59375
▁explaining 7.0078125
▁the 0.68994140625
▁purpose 3.2578125
▁of 0.125732421875
▁each 0.96533203125
▁of 3.119140625
▁these 0.8759765625
▁are 0.87060546875
▁located 3.810546875
▁in 1.1259765625
▁the 0.278076171875
▁header 1.1025390625
▁file 1.546875
, 1.640625
▁not 2.193359375
▁in 0.869140625
▁the 0.051788330078125
▁source 0.7470703125
▁code 2.29296875
. 0.70703125
<0x0A> 0.46044921875
P 7.26171875
. 3.07421875
T 6.9765625
. 0.1529541015625
O 4.0546875
<0x0A> 5.87109375
Here 5.25
, 2.37890625
▁briefly 10.953125
, 0.243896484375
▁are 1.734375
▁the 0.461669921875
▁important 5.58984375
▁points 2.580078125
▁in 2.544921875
▁the 0.430419921875
▁flow 6.296875
▁of 0.451904296875
▁control 1.1572265625
▁through 3.45703125
▁the 0.2183837890625
▁program 1.9228515625
: 2.083984375
<0x0A> 0.03717041015625
I 5.62890625
▁tested 9.671875
▁the 0.99658203125
▁program 1.3388671875
▁many 6.7578125
▁hundreds 6.72265625
▁of 0.0433349609375
▁times 0.068115234375
▁throughout 6.24609375
▁the 0.7119140625
▁coding 4.1796875
▁to 5.65625
▁test 4.58984375
▁every 4.87109375
▁new 6.13671875
▁piece 2.994140625
▁of 0.1182861328125
▁code 0.274169921875
. 1.466796875
▁Therefore 5.015625
▁by 7.75
▁the 0.626953125
▁end 1.5146484375
▁of 0.6259765625
▁the 0.404296875
▁code 3.900390625
▁writing 4.17578125
▁process 1.4951171875
▁I 1.9619140625
▁was 1.0947265625
▁able 2.546875
▁to 0.01068115234375
▁be 3.9765625
▁fairly 2.87890625
▁sure 1.3310546875
▁that 0.32373046875
▁the 0.7822265625
▁compiler 2.330078125
▁worked 1.923828125
. 1.0244140625
▁I 2.310546875
▁still 3.94140625
▁ran 2.548828125
▁ 4.78515625
1 0.9853515625
5 2.80859375
▁tests 2.45703125
▁of 2.861328125
▁the 0.966796875
▁compiler 1.005859375
▁both 6.55859375
▁with 1.7978515625
▁and 0.5517578125
▁without 0.0064544677734375
▁optim 0.89453125
isation 0.2095947265625
▁to 1.6279296875
▁verify 3.630859375
▁that 0.77490234375
▁the 1.2724609375
▁compiler 1.5673828125
▁does 4.03125
▁indeed 1.673828125
▁work 0.82568359375
. 0.60888671875
▁All 5.20703125
▁of 1.3486328125
▁these 0.5673828125
▁tests 0.2467041015625
▁were 1.82421875
▁successful 0.5712890625
. 0.32421875
▁Some 7.046875
▁of 0.55517578125
▁the 0.62060546875
▁results 4.71484375
▁follow 5.83984375
. 0.63232421875
<0x0A> 0.080810546875
Please 7.4140625
▁see 3.044921875
▁separate 7.72265625
▁attachment 6.234375
. 1.7041015625
